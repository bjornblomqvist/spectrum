plugins {
  id "com.cinnober.gradle.semver-git" version "2.2.2"
  id "com.jfrog.bintray" version "1.3.1"
  id "com.diffplug.gradle.spotless" version "1.3.3"
}
apply plugin: 'maven-publish'
//apply plugin: 'checkstyle'

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  repositories { jcenter() }
}


dependencies {
  compile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
  testCompile group: 'org.springframework', name:'spring-test', version: '4.3.4.RELEASE'
  testCompile group: 'org.springframework', name:'spring-core', version: '4.3.4.RELEASE'
  testCompile group: 'org.springframework', name:'spring-context', version: '4.3.4.RELEASE'
}

compileJava { sourceCompatibility = 1.8 }

compileTestJava { sourceCompatibility = 1.8 }

test { finalizedBy jacocoTestReport }

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:all"
}

jacocoTestReport {
  dependsOn subprojects*.test
  sourceSets sourceSets.main

  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
  subprojects.each {
      sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled = true
    html.enabled = true
  }
}

task copyDeps(type: Copy) {
  from configurations.testRuntime
  into 'build/dependency-cache'
}

task wrapper(type: Wrapper) { gradleVersion = '2.14.1' }

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
    from sourceSets.test.allSource
}

jar {
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes("Main-Class": "com.greghaskins.spectrum.app.Application" )
    }
}

artifacts { archives sourcesJar, javadocJar, testJar }

spotless {
  java {
    eclipseFormatFile 'config/eclipse-java-google-style.xml'
    importOrderFile 'config/spectrum.importorder'
    custom 'separate return from previous statements', {
      it.replaceAll(/([^\s\{])\n( *)return /, '$1\n\n$2return ')
    }
  }
  format 'text', {
    target '**/*.gradle', '**/*.md', '**/.gitignore'

    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  freshmark {}
}

classes { dependsOn 'spotlessApply' }

//checkstyle {
//  toolVersion = '6.18'
//  configFile = rootProject.file('config/google_checks.xml')
//}

def verifyCheckstyleWarningsTask (name, warningsFileName) {
  task(name) {
    doFirst {
      def warningsFile = file("build/reports/checkstyle/$warningsFileName")
      if (warningsFile.exists() && warningsFile.text.contains('<error ')) {
        throw new GradleException("There are Checkstyle warnings!\nSee $warningsFile for more info.")
      }
    }
  }
}

test {
  afterSuite { desc, result ->
    if (!desc.parent)
      println("${result.resultType} " +
              "(${result.testCount} tests, " +
              "${result.successfulTestCount} successes, " +
              "${result.failedTestCount} failures, " +
              "${result.skippedTestCount} skipped)")
  }
}

//checkstyleMain {
//  finalizedBy verifyCheckstyleWarningsTask('strictCheckstyleMain', 'main.xml')
//}
//
//checkstyleTest {
//  finalizedBy verifyCheckstyleWarningsTask('strictCheckstyleTest', 'test.xml')
//}

def pomConfig = {
    licenses {
        license {
            name 'MIT License'
            url 'http://www.opensource.org/licenses/mit-license.php'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'greghaskins'
            name 'Gregory Haskins'
            email 'greg@greghaskins.com'
            organization 'SpectrumBDD'
            organizationUrl 'https://github.com/spectrumbdd/'
        }
    }
    scm {
      connection 'scm:git:https://github.com/greghaskins/spectrum.git'
      developerConnection 'scm:git:ssh://github.com:greghaskins/spectrum.git'
      url 'https://github.com/greghaskins/spectrum/tree/master'
    }
}

def description = 'A colorful BDD-style test runner for Java'
def url = 'https://github.com/greghaskins/spectrum'

publishing {
  publications {
    bintrayPublication(MavenPublication) {
      from components.java
      groupId 'com.greghaskins'
      artifactId 'spectrum'
      version project.version

      artifact sourcesJar
      artifact javadocJar
      artifact testJar

      pom.withXml {
        def root = asNode()
        root.appendNode('description', description)
        root.appendNode('name', 'Spectrum')
        root.appendNode('url', url)

        // Make sure compile dependencies don't get marked as "runtime"
        root.dependencies.'*'.findAll() {
          it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
            dep.name == it.artifactId.text()
          }
        }.each { it.scope*.value = 'compile'}

        root.children().last() + pomConfig
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publish = true
  dryRun = System.getenv("CI") == null
  publications = ['bintrayPublication']
  pkg {
    repo = 'maven'
    name = 'Spectrum'
    licenses = ['MIT']
    desc = description
    websiteUrl = url
    issueTrackerUrl = 'https://github.com/greghaskins/spectrum/issues'
    vcsUrl = 'https://github.com/greghaskins/spectrum.git'
    labels = [
      'java',
      'junit',
      'bdd',
      'spec',
      'testing',
      'unit testing',
      'java8',
      'lambda'
    ]
    version {
      name = project.version
      released = new Date()
      mavenCentralSync {
        sync = true
        user = System.getenv('SONATYPE_USER')
        password = System.getenv('SONATYPE_PASSWORD')
        close = '1'
      }
    }
  }
}
